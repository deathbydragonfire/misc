#pragma once
/*
 * binarySearchTree.h
 *
 *  Created on: Dec 5, 2018
 *      Author: Hanna Kessler
 */

#ifndef BINARYSEARCHTREE_H_
#define BINARYSEARCHTREE_H_
#include <iostream>
#include <cstring>
 //treeNode class
template<class Datatype>
class binarySearchTree;



template<class Datatype>
class treeNode
{
	friend class binarySearchTree<Datatype>;

private:
	treeNode<Datatype> *parent;
	treeNode<Datatype> *leftChild;
	treeNode<Datatype> *rightChild;
	Datatype data;
public:
	//constructor for first node, unconnected to anything else but still containing data
	treeNode<Datatype>(Datatype &newData) {
		data = newData;
		parent = nullptr;
		leftChild = nullptr;
		rightChild = nullptr;
	}

	//constructor for a node with a parent but no children yet
	treeNode<Datatype>(treeNode<Datatype> *newParent, Datatype &newData) {
		data = newData;
		parent = newParent;
		leftChild = nullptr;
		rightChild = nullptr;
	}

	//constructor for a node with a parent and one or more children, pass nullprt if child or parent doesn't exist
	treeNode<Datatype>(treeNode<Datatype> *newParent, treeNode<Datatype> *newLeftChild, treeNode<Datatype> *newRightChild, Datatype &newData) {
		data = newData;
		parent = newParent;
		leftChild = newLeftChild;
		rightChild = newRightChild;
	}
	~treeNode<Datatype>() {}
};


//binarySearchTree class

template<class Datatype>
class binarySearchTree
{
private:
	std::size_t nodeCount;
	treeNode<Datatype> *root;

	treeNode<Datatype> *findPointer(Datatype findItem) {
		treeNode<Datatype> *current = root;
		while (current != nullptr) {
			if (current->data == findItem) {
				return current;
			}

			if (findItem > current->data) {
				current = current->rightChild;
			}
			else {
				current = current->leftChild;
			}
		}
		return current;
	}

public:

	//default constructor makes an empty binary search tree with zero entries and a null root
	binarySearchTree<Datatype>() {
		nodeCount = 0;
		root = nullptr;
	}
	binarySearchTree<Datatype>(binarySearchTree &other) {
		this = other;
	}

	~binarySearchTree<Datatype>();

	binarySearchTree<Datatype> operator=(binarySearchTree<Datatype> &other);

	bool empty() const {
		return nodeCount == 0;
	}

	std::size_t size() const {
		return nodeCount;
	}

	void print() const;
	void debug(std::ostream &out) const {
		
	}

	bool find(const Datatype &searchItem, void(*foundNode)(const Datatype&)) {
		treeNode<Datatype> *found = findPointer(searchItem);
		if (found == nullptr) {
			return false;
		}

		foundNode(found->data);
		return true;
	}

	bool erase(const Datatype &deleteItem) {
		treeNode<Datatype> *found = findPointer(deleteItem);
		if (found == nullptr) {
			return false;			//if it doesn't exist, don't delete anything and return false.
		}

		treeNode<Datatype> *right = found->rightChild;
		treeNode<Datatype> *left = found->leftChild;
		treeNode<Datatype> *par = found->parent;
		bool isRight = found->data > par->data;

		delete(found);	//delete this node
		nodeCount--;

		if (right == nullptr) {
			if (left == nullptr) {    //if both children are null (this node is a leaf)
				if (isRight) {  //if it is right
					par->rightChild = nullptr;  //set parent right child to null
				}
				else {
					par->leftChild = nullptr;  //otherwise set parent left child to null
				}
				
				return true; 
			}
			
			//if right is null but not left
			if (isRight) {
				par->rightChild = left;  //connect the left node to parent's right
			}
			else {
				par->leftChild = left;  //or parent's left
			}

			
			return true;
		}

		if (left == nullptr) {  //if left is null but not right
			if (isRight) {
				par->rightChild = right;  //set parent's right child to right
			}
			else {
				par->leftChild = right;  // or parent;s left child to right
			}
			return true;
		}
		
		//TODO
		//if neither is null then you gotta do cool things
		//idr how this works
		//HALP

	}

	//inserts the new item into the tree by creating a treenode with this data and connecting it in the proper position
	void insert(const Datatype &newItem) {
		//if it's empty, make this the root node
		if (empty()) {
			root = new treeNode<Datatype>(newItem);
			nodeCount++;
			return;
		}
		//traverse the tree until a leaf is found, then create a new leaf and return
		treeNode<Datatype> *currentNode = root;
		while (currentNode != nullptr) {
			if (newItem > currentNode->data) {
				if (currentNode->rightChild == nullptr) {
					currentNode->rightChild = new treeNode<Datatype>(currentNode, newItem);
					nodeCount++;
					return;
				}
				currentNode = currentNode->rightChild;
			}
			else
			{
				if (currentNode->leftChild == nullptr) {
					currentNode->leftChild = new treeNode<Datatype>(currentNode, newItem);
					nodeCount++;
					return;
				}
				currentNode = currentNode->leftChild;
			}
		}
	}

	//if the data is a duplicate, call the duplicateItemFound function, otherwise insert it normally 
	void insert(const Datatype &newItem, void(*duplicateItemFound)(Datatype &existingItem, const Datatype &newItem)) {
		treeNode<Datatype> *found = findPointer(newItem);
		if (found != nullptr) {
			duplicateItemFound(found->data, newItem);
			return;
		}
		insert(newItem);
	}
	void traverse(void(*itemFound)(const Datatype &foundItem)) const {
		//TODO Recursive fun stuff
	}

};
template<class Datatype>
void addToTree(binarySearchTree<Datatype> tree, Datatype &data) {
	tree.insert(data);
}

#endif /* BINARYSEARCHTREE_H_ */